# Only1MCP Configuration - Small Team Template
# Optimized for 5-20 person teams with shared resources
# Balanced performance, security, and resource usage

version: "1.0"

# Core proxy configuration
proxy:
  # Network binding - all interfaces for team access
  host: 0.0.0.0
  port: 8080

  # Performance - optimized for team size
  worker_threads: 8
  max_connections: 1000

  # Timeouts
  request_timeout: 30s
  idle_timeout: 120s
  shutdown_timeout: 30s

  # Optional TLS for internal network
  # tls:
  #   enabled: true
  #   cert_file: /etc/ssl/certs/only1mcp.crt
  #   key_file: /etc/ssl/private/only1mcp.key

# MCP Backend Servers
servers:
  - id: dev-server
    name: "Development MCP Server"
    enabled: true
    transport: http
    endpoint: http://mcp-dev.internal:9001

    # Connection pooling
    pool:
      min_connections: 2
      max_connections: 20
      idle_timeout: 60s

    # Health checking
    health_check:
      enabled: true
      interval: 30s
      timeout: 5s
      retries: 3

  - id: staging-server
    name: "Staging MCP Server"
    enabled: true
    transport: http
    endpoint: http://mcp-staging.internal:9002

    pool:
      min_connections: 2
      max_connections: 20
      idle_timeout: 60s

    health_check:
      enabled: true
      interval: 30s
      timeout: 5s
      retries: 3

  - id: shared-tools
    name: "Shared Tools Server"
    enabled: true
    transport: stdio
    command: ["mcp-tools-server"]
    args: ["--shared"]

    env:
      TEAM_ID: "${TEAM_ID}"
      ENV_TYPE: "shared"

    # Resource limits for shared server
    limits:
      memory: 1GB
      cpu: 2.0
      timeout: 60s

# Routing configuration
routing:
  # Weighted routing for A/B testing
  strategy: weighted

  # Server weights
  weights:
    dev-server: 60
    staging-server: 30
    shared-tools: 10

  # Enable sticky sessions for consistency
  sticky_sessions:
    enabled: true
    ttl: 1h
    cookie_name: "X-Server-Id"

  # Circuit breaker for resilience
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    success_threshold: 3
    timeout: 30s
    error_rate_threshold: 0.5

# Caching configuration - moderate
cache:
  enabled: true

  # L1 Cache - Tool Results
  l1:
    enabled: true
    max_size: 200MB
    ttl: 10m
    eviction: lru

  # L2 Cache - Resources
  l2:
    enabled: true
    max_size: 500MB
    ttl: 30m
    eviction: lfu

  # L3 Cache - Prompts (small for teams)
  l3:
    enabled: true
    max_size: 100MB
    ttl: 1h
    eviction: arc

  # Cache key includes user context
  key:
    hash: blake3
    include_headers: false
    include_auth: true  # Per-user caching

# Security - API key authentication
auth:
  enabled: true

  methods:
    - api_key

  api_key:
    enabled: true
    header: "X-API-Key"
    query_param: "api_key"

    # Team API keys (store securely in production)
    keys:
      - key: "${TEAM_API_KEY_1}"
        name: "Team Key 1"
        roles: ["developer"]

      - key: "${TEAM_API_KEY_2}"
        name: "Team Key 2"
        roles: ["developer"]

      - key: "${ADMIN_API_KEY}"
        name: "Admin Key"
        roles: ["admin"]

# Authorization - basic RBAC
authorization:
  enabled: true
  default_policy: deny

  roles:
    - name: admin
      permissions:
        - "*"

    - name: developer
      permissions:
        - "tools:*"
        - "resources:read"
        - "servers:read"

    - name: viewer
      permissions:
        - "tools:read"
        - "resources:read"

# Rate limiting - per user
rate_limit:
  enabled: true

  # Team-wide limits
  global:
    requests_per_second: 1000
    burst: 2000

  # Per-user limits
  per_user:
    requests_per_second: 50
    requests_per_minute: 2000
    requests_per_hour: 50000

  # Per-IP limits (for shared offices)
  per_ip:
    requests_per_second: 200
    requests_per_minute: 10000

# Logging configuration
logging:
  level: info
  format: json  # Structured for aggregation
  output: file

  # Log rotation
  file_path: /var/log/only1mcp/proxy.log
  max_size: 100MB
  max_age: 7d
  max_backups: 5

  # Per-module levels
  modules:
    only1mcp::proxy: info
    only1mcp::auth: debug
    only1mcp::cache: info

# Monitoring - basic observability
monitoring:
  # Metrics for Prometheus
  metrics:
    enabled: true
    prometheus:
      enabled: true
      port: 9090
      path: /metrics

  # Basic tracing
  tracing:
    enabled: true
    sampling:
      strategy: probabilistic
      rate: 0.01  # 1% sampling

  # Health checks
  health:
    enabled: true
    endpoints:
      liveness: /health/live
      readiness: /health/ready
      startup: /health/startup

    # What to check
    checks:
      - backends
      - cache

# Hot-reload configuration
hot_reload:
  enabled: true
  watch_interval: 5s
  debounce: 1s

  reloadable:
    - servers
    - routing
    - cache
    - rate_limit
    - auth

# Team collaboration features
collaboration:
  # Shared context
  shared_context:
    enabled: true
    ttl: 1h

  # Request broadcasting
  broadcast:
    enabled: false  # Enable for real-time collaboration

  # Team notifications
  notifications:
    enabled: true
    webhook_url: "${TEAM_WEBHOOK_URL}"
    events:
      - server_down
      - rate_limit_exceeded
      - auth_failure

# Resource management
resources:
  # Cost tracking
  cost_tracking:
    enabled: true
    currency: USD

    # Cost allocation
    allocation:
      by_user: true
      by_project: true

  # Budget alerts
  budget:
    monthly_limit: 1000.00
    alert_at: [50, 80, 100]  # Percentage thresholds

# Backup and recovery
backup:
  # Configuration backup
  config:
    enabled: true
    interval: 1h
    retention: 7d
    path: /backup/config

  # Cache persistence
  cache:
    enabled: false  # Enable for persistent cache

# Development/staging features
environments:
  # Environment-specific overrides
  current: "${ENVIRONMENT}"

  overrides:
    development:
      logging.level: debug
      cache.l1.ttl: 2m

    staging:
      rate_limit.per_user.requests_per_minute: 100
      monitoring.tracing.sampling.rate: 0.1

    production:
      logging.level: warn
      hot_reload.enabled: false

# Notes for teams
# ===============
# 1. Replace ${VARIABLE} placeholders with actual values
# 2. Store API keys securely (use environment variables or secrets manager)
# 3. Adjust rate limits based on team size and usage patterns
# 4. Configure monitoring endpoints for your observability stack
# 5. Set up proper log aggregation (ELK, Splunk, etc.)
#
# Quick Start:
#   export TEAM_API_KEY_1="your-key-here"
#   export TEAM_API_KEY_2="your-key-here"
#   export ADMIN_API_KEY="admin-key-here"
#   only1mcp start --config team.yaml
#
# With environment override:
#   ENVIRONMENT=staging only1mcp start --config team.yaml
#
# Health check:
#   curl http://localhost:8080/health/ready
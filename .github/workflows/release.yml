name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.4.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          echo "Generating changelog for $VERSION"

          # Extract changelog section for this version
          CHANGELOG=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d')

          # If no specific version section, use recent commits
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" HEAD~10..HEAD)
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Only1MCP ${{ steps.get_version.outputs.version }}
          body: |
            # Only1MCP ${{ steps.get_version.outputs.version }}

            High-performance MCP server aggregator with 50-70% context reduction.

            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ### Homebrew (macOS/Linux)
            ```bash
            brew install only1mcp
            ```

            ### Cargo
            ```bash
            cargo install only1mcp
            ```

            ### Direct Download
            Download the appropriate binary for your platform from the assets below.

            ## Checksums
            See `checksums.txt` in the release assets.

            ## Documentation
            - [Configuration Guide](https://github.com/doublegate/Only1MCP/blob/main/docs/CONFIGURATION_GUIDE.md)
            - [API Reference](https://github.com/doublegate/Only1MCP/blob/main/docs/API_REFERENCE.md)
            - [Deployment Guide](https://github.com/doublegate/Only1MCP/blob/main/docs/DEPLOYMENT_GUIDE.md)
          draft: true
          prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-binaries:
    name: Build - ${{ matrix.target }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use_cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use_cross: true

          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            use_cross: false

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use_cross: false
          - os: windows-latest
            target: i686-pc-windows-msvc
            use_cross: false

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Cross
        if: matrix.use_cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          echo "CARGO_CMD=cross" >> $GITHUB_ENV

      - name: Set cargo command
        if: '!matrix.use_cross'
        run: echo "CARGO_CMD=cargo" >> $GITHUB_ENV

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: |
          ${{ env.CARGO_CMD }} build --release --target ${{ matrix.target }} --locked

      - name: Package binary
        shell: bash
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          TARGET=${{ matrix.target }}

          # Binary name
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="only1mcp.exe"
          else
            BINARY_NAME="only1mcp"
          fi

          # Create package directory
          PKG_DIR="only1mcp-${VERSION}-${TARGET}"
          mkdir -p "${PKG_DIR}"

          # Copy files
          cp "target/${TARGET}/release/${BINARY_NAME}" "${PKG_DIR}/"
          cp README.md LICENSE CHANGELOG.md "${PKG_DIR}/"
          cp -r docs "${PKG_DIR}/"
          cp -r config/templates "${PKG_DIR}/config-templates"

          # Create archive
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "${PKG_DIR}.zip" "${PKG_DIR}"
            echo "ASSET_PATH=${PKG_DIR}.zip" >> $GITHUB_ENV
            echo "ASSET_NAME=${PKG_DIR}.zip" >> $GITHUB_ENV
          else
            tar czf "${PKG_DIR}.tar.gz" "${PKG_DIR}"
            echo "ASSET_PATH=${PKG_DIR}.tar.gz" >> $GITHUB_ENV
            echo "ASSET_NAME=${PKG_DIR}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Generate checksum
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            shasum -a 256 "${{ env.ASSET_PATH }}" > "${{ env.ASSET_PATH }}.sha256"
          else
            sha256sum "${{ env.ASSET_PATH }}" > "${{ env.ASSET_PATH }}.sha256"
          fi

      - name: Upload binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}.sha256
          asset_name: ${{ env.ASSET_NAME }}.sha256
          asset_content_type: text/plain

  build-docker:
    name: Build Docker Images
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            doublegate/Only1MCP
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.create-release.outputs.version }}

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish to crates.io
        run: |
          # Check if already published
          VERSION=${{ needs.create-release.outputs.version }}
          VERSION_NO_V=${VERSION#v}

          if cargo search only1mcp | grep -q "^only1mcp = \"$VERSION_NO_V\""; then
            echo "Version $VERSION_NO_V already published, skipping"
          else
            cargo publish --allow-dirty
          fi

  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout homebrew-tap
        uses: actions/checkout@v4
        with:
          repository: only1mcp/homebrew-tap
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Update formula
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          VERSION_NO_V=${VERSION#v}

          # Download macOS binary to get SHA256
          wget -q "https://github.com/doublegate/Only1MCP/releases/download/${VERSION}/only1mcp-${VERSION}-x86_64-apple-darwin.tar.gz"
          SHA256=$(sha256sum "only1mcp-${VERSION}-x86_64-apple-darwin.tar.gz" | awk '{print $1}')

          # Update formula
          sed -i "s/version \".*\"/version \"${VERSION_NO_V}\"/" Formula/only1mcp.rb
          sed -i "s/sha256 \".*\"/sha256 \"${SHA256}\"/" Formula/only1mcp.rb

          # Commit and push
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/only1mcp.rb
          git commit -m "Update only1mcp to ${VERSION}"
          git push

  create-checksums:
    name: Create Release Checksums
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.run_id }},
            });

            for (const artifact of artifacts.data.artifacts) {
              console.log(`Downloading ${artifact.name}`);
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip',
              });
              require('fs').writeFileSync(`${artifact.name}.zip`, Buffer.from(download.data));
            }

      - name: Generate combined checksums
        run: |
          # Extract all artifacts
          for f in *.zip; do unzip -o "$f"; done

          # Generate checksums for all release files
          sha256sum only1mcp-*.tar.gz only1mcp-*.zip > checksums.txt

          # Display for verification
          cat checksums.txt

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

  announce-release:
    name: Announce Release
    needs: [create-release, build-binaries, build-docker, publish-crate]
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord notification
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          curl -X POST $DISCORD_WEBHOOK \
            -H "Content-Type: application/json" \
            -d "{\"content\": \"🎉 Only1MCP ${VERSION} has been released! Check it out at https://github.com/doublegate/Only1MCP/releases/tag/${VERSION}\"}"

      - name: Send Twitter announcement
        if: success()
        env:
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        run: |
          echo "Tweet about release (requires Twitter API setup)"
          # Twitter API integration would go here